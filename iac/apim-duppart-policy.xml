<!-- Generated via IaC -->

<policies>
    <inbound>
        <base />
        <authentication-managed-identity resource="{applicationUri}" />
        <!-- APIM has used this header to authenticate the request, drop it as we forward the request to our internal endpoint, as it has no use for the client's private API key -->
        <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
        <!-- Forward APIM subscription key name to our internal endpoint so it can identify the user who initiated the API call -->
        <set-header name="Ocp-Apim-Subscription-Name" exists-action="override">
            <value>@(context.Subscription.Name)</value>
        </set-header>
        <!--
            Derive the state abbreviation from the subscription name and forward to
            the internal endpoint. Subscriptions names are expected to be in the
            format: {state-abbr}-DupPart.

            Default to "ea".
        -->
        <choose>
            <when condition="@(Regex.IsMatch(context.Subscription.Name, "^[A-Z]{2}-DupPart"))">
                <set-variable name="InitiatingState" value="@{
                    string pattern = @"^(?<state>[A-Z]{2})-DupPart";
                    var matches = Regex.Match(context.Subscription.Name, pattern);
                    return matches.Groups["state"].Value.ToLower();
                }" />
            </when>
            <otherwise>
                <set-variable name="IntitiatingState" value="ea" />
            </otherwise>
        </choose>
        <!--
            Pass derived state abbreviation to backend as X-Initiating-State header
        -->
        <set-header name="X-Initiating-State" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<string>("InitiatingState", ""))</value>
        </set-header>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
